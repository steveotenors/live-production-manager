// @ts-nocheck
'use client';

import React, { useState, useEffect, useRef, DragEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription, DialogClose } from '@/components/ui/dialog';
import { useToast } from '@/components/ui/use-toast';
import { FileUpload } from '@/components/FileUpload';
import { 
  ChevronRight, 
  ChevronDown, 
  Folder, 
  File as FileIcon, 
  Plus, 
  Upload, 
  ArrowLeft, 
  ArrowUp, 
  Home,
  MoreHorizontal,
  Download,
  Eye,
  Edit,
  Trash2,
  FolderUp,
  CheckSquare,
  X,
  FolderClosed,
  Trash
} from 'lucide-react';
import { supabaseClient } from '@/lib/supabaseClient';
import { formatDistanceToNow } from 'date-fns';
import { 
  createFolder, 
  listFiles, 
  getFileUrl, 
  deleteFile, 
  moveFile,
  renameFile
} from '@/lib/supabase-storage';
import { 
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuTrigger,
  ContextMenuSeparator
} from '@/components/ui/context-menu';
import { 
  Tooltip,
  TooltipContent,
  TooltipTrigger,
  TooltipProvider,
} from '@/components/ui/tooltip';

// Define the delay function locally
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

interface FileItem {
  id: string;
  name: string;
  path: string;
  size?: number;
  type?: string;
  created_at?: string;
  updated_at?: string;
  updated?: string;
  url?: string;
}

interface FolderItem {
  id: string;
  name: string;
  path: string;
  isExpanded?: boolean;
  children?: (FolderItem | FileItem)[];
  created_at?: string;
  updated?: string;
}

interface BreadcrumbItem {
  name: string;
  path: string;
}

interface FileManagerProps {
  projectId: string;
  basePath: string;
  realtimeEnabled?: boolean;
}

// Add state for sorting
type SortField = 'name' | 'updated' | 'size';
type SortDirection = 'asc' | 'desc';

const LoadingOverlay = ({ message }: { message: string }) => (
  <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-[100]">
    <div className="bg-card p-6 rounded-lg shadow-lg max-w-md w-full border">
      <div className="flex flex-col items-center space-y-4">
        <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-primary"></div>
        <p className="text-center text-muted-foreground">{message}</p>
      </div>
    </div>
  </div>
);

const formatBytes = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

type Operation = {
  type: 'delete' | 'rename' | 'move';
  items: Array<{
    item: FileItem | FolderItem;
    data?: Blob;
    folderContents?: Array<{path: string, data?: Blob}>;
    oldPath?: string;
    newPath?: string;
  }>;
  oldPath?: string;
  newPath?: string;
  isFolder?: boolean;
  sourcePath?: string;
  targetPath?: string;
  data?: Blob;
  folderItems?: Array<{name: string, data?: Blob}>;
};

export default function FileManager({ projectId, basePath = '', realtimeEnabled }: FileManagerProps): JSX.Element {
  const { toast } = useToast();
  const [currentPath, setCurrentPath] = useState('');
  const [items, setItems] = useState<(FileItem | FolderItem)[]>([]);
  const [expandedFolders, setExpandedFolders] = useState<Record<string, boolean>>({});
  const [loading, setLoading] = useState(true);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [selectedItem, setSelectedItem] = useState<FileItem | FolderItem | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [showUploadDialog, setShowUploadDialog] = useState(false);
  const [showPreviewDialog, setShowPreviewDialog] = useState(false);
  const [operationLoading, setOperationLoading] = useState(false);

  // Define renderFilePreview INSIDE the component, before the return statement
  const renderFilePreview = () => {
    if (!selectedItem || !previewUrl) return null;
    
    const fileExtension = selectedItem.name.split('.').pop()?.toLowerCase();
    
    // Handle images
    if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(fileExtension || '')) {
      return (
        <div className="flex items-center justify-center p-4 max-h-[70vh] overflow-hidden">
          <img 
            src={previewUrl} 
            alt={selectedItem.name} 
            className="max-w-full max-h-[70vh] object-contain" 
          />
        </div>
      );
    }
    
    // Handle video
    if (['mp4', 'webm', 'ogg'].includes(fileExtension || '')) {
      return (
        <div className="p-4">
          <video 
            controls 
            className="max-w-full max-h-[70vh]" 
            src={previewUrl}
          >
            Your browser does not support the video tag.
          </video>
        </div>
      );
    }
    
    // Handle audio
    if (['mp3', 'wav', 'ogg'].includes(fileExtension || '')) {
      return (
        <div className="p-4">
          <audio 
            controls 
            className="w-full" 
            src={previewUrl}
          >
            Your browser does not support the audio tag.
          </audio>
        </div>
      );
    }
    
    // Handle PDFs
    if (fileExtension === 'pdf') {
      return (
        <div className="p-4 h-[70vh]">
          <iframe 
            src={previewUrl} 
            className="w-full h-full"
            title={selectedItem.name}
          ></iframe>
        </div>
      );
    }
    
    // For other files, show download link
    return (
      <div className="p-8 text-center">
        <p className="mb-4">Preview not available for this file type.</p>
        <Button asChild>
          <a href={previewUrl} download={selectedItem.name} target="_blank" rel="noopener noreferrer">
            <Download className="mr-2 h-4 w-4" />
            Download File
          </a>
        </Button>
      </div>
    );
  };

  // Simple return statement for the minimalist version
  return (
    <div>
      {operationLoading && <LoadingOverlay message="Processing operation..." />}
      
      <Dialog open={showPreviewDialog} onOpenChange={setShowPreviewDialog}>
        <DialogContent className="sm:max-w-4xl">
          <DialogHeader>
            <DialogTitle>{selectedItem?.name}</DialogTitle>
          </DialogHeader>
          
          {renderFilePreview()}
          
          <DialogFooter>
            <Button onClick={() => setShowPreviewDialog(false)}>Close</Button>
            {previewUrl && (
              <Button asChild>
                <a href={previewUrl} download={selectedItem?.name} target="_blank" rel="noopener noreferrer">
                  <Download className="mr-2 h-4 w-4" />
                  Download
                </a>
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
